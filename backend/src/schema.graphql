# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

type Club {
  ClubEvent: [ClubEvent!]
  ClubMember: [ClubMember!]
  _count: ClubCount!
  clubAdmin: [ClubAdmin!]
  clubInfoChangeRequest: [ClubInfoChangeRequest!]
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  status: ClubStatusEnum!
  updatedAt: DateTime!
}

type ClubAdmin {
  _count: ClubAdminCount!
  club: Club!
  clubAdminStatus: ClubAdminStatusEnum!
  clubId: String!
  clubRequest: [ClubInfoChangeRequest!]
  createdAt: DateTime!
  id: ID!
  role: ClubAdminRoleEnum!
  roleLabel: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type ClubAdminCount {
  clubRequest: Int!
}

input ClubAdminCreateManyClubInput {
  clubAdminStatus: ClubAdminStatusEnum
  createdAt: DateTime
  id: String
  role: ClubAdminRoleEnum!
  roleLabel: String!
  updatedAt: DateTime
  userId: String!
}

input ClubAdminCreateManyClubInputEnvelope {
  data: [ClubAdminCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubAdminCreateManyUserInput {
  clubAdminStatus: ClubAdminStatusEnum
  clubId: String!
  createdAt: DateTime
  id: String
  role: ClubAdminRoleEnum!
  roleLabel: String!
  updatedAt: DateTime
}

input ClubAdminCreateManyUserInputEnvelope {
  data: [ClubAdminCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ClubAdminCreateNestedManyWithoutClubInput {
  connect: [ClubAdminWhereUniqueInput!]
  connectOrCreate: [ClubAdminCreateOrConnectWithoutClubInput!]
  create: [ClubAdminCreateWithoutClubInput!]
  createMany: ClubAdminCreateManyClubInputEnvelope
}

input ClubAdminCreateNestedManyWithoutUserInput {
  connect: [ClubAdminWhereUniqueInput!]
  connectOrCreate: [ClubAdminCreateOrConnectWithoutUserInput!]
  create: [ClubAdminCreateWithoutUserInput!]
  createMany: ClubAdminCreateManyUserInputEnvelope
}

input ClubAdminCreateNestedOneWithoutClubRequestInput {
  connect: ClubAdminWhereUniqueInput
  connectOrCreate: ClubAdminCreateOrConnectWithoutClubRequestInput
  create: ClubAdminCreateWithoutClubRequestInput
}

input ClubAdminCreateOrConnectWithoutClubInput {
  create: ClubAdminCreateWithoutClubInput!
  where: ClubAdminWhereUniqueInput!
}

input ClubAdminCreateOrConnectWithoutClubRequestInput {
  create: ClubAdminCreateWithoutClubRequestInput!
  where: ClubAdminWhereUniqueInput!
}

input ClubAdminCreateOrConnectWithoutUserInput {
  create: ClubAdminCreateWithoutUserInput!
  where: ClubAdminWhereUniqueInput!
}

input ClubAdminCreateWithoutClubInput {
  clubAdminStatus: ClubAdminStatusEnum
  clubRequest: ClubInfoChangeRequestCreateNestedManyWithoutRequesterInput
  createdAt: DateTime
  id: String
  role: ClubAdminRoleEnum!
  roleLabel: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutClubAdminInput!
}

input ClubAdminCreateWithoutClubRequestInput {
  club: ClubCreateNestedOneWithoutClubAdminInput!
  clubAdminStatus: ClubAdminStatusEnum
  createdAt: DateTime
  id: String
  role: ClubAdminRoleEnum!
  roleLabel: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutClubAdminInput!
}

input ClubAdminCreateWithoutUserInput {
  club: ClubCreateNestedOneWithoutClubAdminInput!
  clubAdminStatus: ClubAdminStatusEnum
  clubRequest: ClubInfoChangeRequestCreateNestedManyWithoutRequesterInput
  createdAt: DateTime
  id: String
  role: ClubAdminRoleEnum!
  roleLabel: String!
  updatedAt: DateTime
}

input ClubAdminListRelationFilter {
  every: ClubAdminWhereInput
  none: ClubAdminWhereInput
  some: ClubAdminWhereInput
}

input ClubAdminOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubAdminRelationFilter {
  is: ClubAdminWhereInput
  isNot: ClubAdminWhereInput
}

enum ClubAdminRoleEnum {
  ASSISTANT_SECRETARY
  ASSISTANT_TREASURER
  COMMITEE
  PRESIDENT
  SECRETARY
  TREASURER
  VICE_PRESIDENT
}

enum ClubAdminStatusEnum {
  ACTIVE
  IN_REVIEW
  RETIRED
}

input ClubAdminUserIdClubIdCompoundUniqueInput {
  clubId: String!
  userId: String!
}

input ClubAdminWhereInput {
  AND: [ClubAdminWhereInput!]
  NOT: [ClubAdminWhereInput!]
  OR: [ClubAdminWhereInput!]
  club: ClubRelationFilter
  clubAdminStatus: EnumClubAdminStatusEnumFilter
  clubId: StringFilter
  clubRequest: ClubInfoChangeRequestListRelationFilter
  createdAt: DateTimeFilter
  id: StringFilter
  role: EnumClubAdminRoleEnumFilter
  roleLabel: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ClubAdminWhereUniqueInput {
  id: String
  userId_clubId: ClubAdminUserIdClubIdCompoundUniqueInput
}

type ClubCount {
  ClubEvent: Int!
  ClubMember: Int!
  clubAdmin: Int!
  clubInfoChangeRequest: Int!
}

input ClubCreateInput {
  ClubEvent: ClubEventCreateNestedManyWithoutClubInput
  ClubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubAdmin: ClubAdminCreateNestedManyWithoutClubInput
  clubInfoChangeRequest: ClubInfoChangeRequestCreateNestedManyWithoutClubInput
  createdAt: DateTime
  description: String!
  id: String
  name: String!
  status: ClubStatusEnum
  updatedAt: DateTime
}

input ClubCreateNestedOneWithoutClubAdminInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubAdminInput
  create: ClubCreateWithoutClubAdminInput
}

input ClubCreateNestedOneWithoutClubEventInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubEventInput
  create: ClubCreateWithoutClubEventInput
}

input ClubCreateNestedOneWithoutClubInfoChangeRequestInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubInfoChangeRequestInput
  create: ClubCreateWithoutClubInfoChangeRequestInput
}

input ClubCreateNestedOneWithoutClubMemberInput {
  connect: ClubWhereUniqueInput
  connectOrCreate: ClubCreateOrConnectWithoutClubMemberInput
  create: ClubCreateWithoutClubMemberInput
}

input ClubCreateOrConnectWithoutClubAdminInput {
  create: ClubCreateWithoutClubAdminInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutClubEventInput {
  create: ClubCreateWithoutClubEventInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutClubInfoChangeRequestInput {
  create: ClubCreateWithoutClubInfoChangeRequestInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateOrConnectWithoutClubMemberInput {
  create: ClubCreateWithoutClubMemberInput!
  where: ClubWhereUniqueInput!
}

input ClubCreateWithoutClubAdminInput {
  ClubEvent: ClubEventCreateNestedManyWithoutClubInput
  ClubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubInfoChangeRequest: ClubInfoChangeRequestCreateNestedManyWithoutClubInput
  createdAt: DateTime
  description: String!
  id: String
  name: String!
  status: ClubStatusEnum
  updatedAt: DateTime
}

input ClubCreateWithoutClubEventInput {
  ClubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubAdmin: ClubAdminCreateNestedManyWithoutClubInput
  clubInfoChangeRequest: ClubInfoChangeRequestCreateNestedManyWithoutClubInput
  createdAt: DateTime
  description: String!
  id: String
  name: String!
  status: ClubStatusEnum
  updatedAt: DateTime
}

input ClubCreateWithoutClubInfoChangeRequestInput {
  ClubEvent: ClubEventCreateNestedManyWithoutClubInput
  ClubMember: ClubMemberCreateNestedManyWithoutClubInput
  clubAdmin: ClubAdminCreateNestedManyWithoutClubInput
  createdAt: DateTime
  description: String!
  id: String
  name: String!
  status: ClubStatusEnum
  updatedAt: DateTime
}

input ClubCreateWithoutClubMemberInput {
  ClubEvent: ClubEventCreateNestedManyWithoutClubInput
  clubAdmin: ClubAdminCreateNestedManyWithoutClubInput
  clubInfoChangeRequest: ClubInfoChangeRequestCreateNestedManyWithoutClubInput
  createdAt: DateTime
  description: String!
  id: String
  name: String!
  status: ClubStatusEnum
  updatedAt: DateTime
}

type ClubEvent {
  ClubMemberEvent: [ClubMemberEvent!]
  _count: ClubEventCount!
  changed: Boolean!
  club: Club!
  clubId: String!
  createdAt: DateTime!
  description: String!
  endAt: DateTime!
  id: ID!
  memberOnly: Boolean!
  name: String!
  startAt: DateTime!
  status: ClubEventStatusEnum!
  thumbnail: String
  updatedAt: DateTime!
}

type ClubEventCount {
  ClubMemberEvent: Int!
}

input ClubEventCreateManyClubInput {
  changed: Boolean
  createdAt: DateTime
  description: String!
  endAt: DateTime!
  id: String
  memberOnly: Boolean
  name: String!
  startAt: DateTime!
  status: ClubEventStatusEnum
  thumbnail: String
  updatedAt: DateTime
}

input ClubEventCreateManyClubInputEnvelope {
  data: [ClubEventCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubEventCreateNestedManyWithoutClubInput {
  connect: [ClubEventWhereUniqueInput!]
  connectOrCreate: [ClubEventCreateOrConnectWithoutClubInput!]
  create: [ClubEventCreateWithoutClubInput!]
  createMany: ClubEventCreateManyClubInputEnvelope
}

input ClubEventCreateNestedOneWithoutClubMemberEventInput {
  connect: ClubEventWhereUniqueInput
  connectOrCreate: ClubEventCreateOrConnectWithoutClubMemberEventInput
  create: ClubEventCreateWithoutClubMemberEventInput
}

input ClubEventCreateOrConnectWithoutClubInput {
  create: ClubEventCreateWithoutClubInput!
  where: ClubEventWhereUniqueInput!
}

input ClubEventCreateOrConnectWithoutClubMemberEventInput {
  create: ClubEventCreateWithoutClubMemberEventInput!
  where: ClubEventWhereUniqueInput!
}

input ClubEventCreateWithoutClubInput {
  ClubMemberEvent: ClubMemberEventCreateNestedManyWithoutEventInput
  changed: Boolean
  createdAt: DateTime
  description: String!
  endAt: DateTime!
  id: String
  memberOnly: Boolean
  name: String!
  startAt: DateTime!
  status: ClubEventStatusEnum
  thumbnail: String
  updatedAt: DateTime
}

input ClubEventCreateWithoutClubMemberEventInput {
  changed: Boolean
  club: ClubCreateNestedOneWithoutClubEventInput!
  createdAt: DateTime
  description: String!
  endAt: DateTime!
  id: String
  memberOnly: Boolean
  name: String!
  startAt: DateTime!
  status: ClubEventStatusEnum
  thumbnail: String
  updatedAt: DateTime
}

input ClubEventListRelationFilter {
  every: ClubEventWhereInput
  none: ClubEventWhereInput
  some: ClubEventWhereInput
}

input ClubEventOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubEventRelationFilter {
  is: ClubEventWhereInput
  isNot: ClubEventWhereInput
}

enum ClubEventStatusEnum {
  AWAITING
  CANCELLED
  IN_REVIEW
  ONGOING
}

input ClubEventWhereInput {
  AND: [ClubEventWhereInput!]
  ClubMemberEvent: ClubMemberEventListRelationFilter
  NOT: [ClubEventWhereInput!]
  OR: [ClubEventWhereInput!]
  changed: BoolFilter
  club: ClubRelationFilter
  clubId: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  endAt: DateTimeFilter
  id: StringFilter
  memberOnly: BoolFilter
  name: StringFilter
  startAt: DateTimeFilter
  status: EnumClubEventStatusEnumFilter
  thumbnail: StringNullableFilter
  updatedAt: DateTimeFilter
}

input ClubEventWhereUniqueInput {
  id: String
}

type ClubInfoChangeAdminRequest {
  club: ClubInfoChangeRequest!
  clubChangeRequestId: String!
  createdAt: DateTime!
  id: ID!
  label: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

input ClubInfoChangeAdminRequestCreateManyClubInput {
  createdAt: DateTime
  id: String!
  label: String!
  updatedAt: DateTime
  userId: String!
}

input ClubInfoChangeAdminRequestCreateManyClubInputEnvelope {
  data: [ClubInfoChangeAdminRequestCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubInfoChangeAdminRequestCreateManyUserInput {
  clubChangeRequestId: String!
  createdAt: DateTime
  id: String!
  label: String!
  updatedAt: DateTime
}

input ClubInfoChangeAdminRequestCreateManyUserInputEnvelope {
  data: [ClubInfoChangeAdminRequestCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ClubInfoChangeAdminRequestCreateNestedManyWithoutClubInput {
  connect: [ClubInfoChangeAdminRequestWhereUniqueInput!]
  connectOrCreate: [ClubInfoChangeAdminRequestCreateOrConnectWithoutClubInput!]
  create: [ClubInfoChangeAdminRequestCreateWithoutClubInput!]
  createMany: ClubInfoChangeAdminRequestCreateManyClubInputEnvelope
}

input ClubInfoChangeAdminRequestCreateNestedManyWithoutUserInput {
  connect: [ClubInfoChangeAdminRequestWhereUniqueInput!]
  connectOrCreate: [ClubInfoChangeAdminRequestCreateOrConnectWithoutUserInput!]
  create: [ClubInfoChangeAdminRequestCreateWithoutUserInput!]
  createMany: ClubInfoChangeAdminRequestCreateManyUserInputEnvelope
}

input ClubInfoChangeAdminRequestCreateOrConnectWithoutClubInput {
  create: ClubInfoChangeAdminRequestCreateWithoutClubInput!
  where: ClubInfoChangeAdminRequestWhereUniqueInput!
}

input ClubInfoChangeAdminRequestCreateOrConnectWithoutUserInput {
  create: ClubInfoChangeAdminRequestCreateWithoutUserInput!
  where: ClubInfoChangeAdminRequestWhereUniqueInput!
}

input ClubInfoChangeAdminRequestCreateWithoutClubInput {
  createdAt: DateTime
  id: String!
  label: String!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutClubInfoChangeAdminRequestInput!
}

input ClubInfoChangeAdminRequestCreateWithoutUserInput {
  club: ClubInfoChangeRequestCreateNestedOneWithoutClubInfoChangeAdminRequestInput!
  createdAt: DateTime
  id: String!
  label: String!
  updatedAt: DateTime
}

input ClubInfoChangeAdminRequestListRelationFilter {
  every: ClubInfoChangeAdminRequestWhereInput
  none: ClubInfoChangeAdminRequestWhereInput
  some: ClubInfoChangeAdminRequestWhereInput
}

input ClubInfoChangeAdminRequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubInfoChangeAdminRequestWhereInput {
  AND: [ClubInfoChangeAdminRequestWhereInput!]
  NOT: [ClubInfoChangeAdminRequestWhereInput!]
  OR: [ClubInfoChangeAdminRequestWhereInput!]
  club: ClubInfoChangeRequestRelationFilter
  clubChangeRequestId: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  label: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ClubInfoChangeAdminRequestWhereUniqueInput {
  id: String
}

type ClubInfoChangeRequest {
  _count: ClubInfoChangeRequestCount!
  changeDescription: String!
  changeStatus: requestStatusEnum!
  club: Club!
  clubId: String!
  clubInfoChangeAdminRequest: [ClubInfoChangeAdminRequest!]
  createdAt: DateTime!
  description: String!
  expireDate: DateTime!
  id: ID!
  jobId: String
  name: String!
  requester: ClubAdmin!
  requesterId: String!
  status: requestStatusEnum!
  title: String!
  updatedAt: DateTime!
}

type ClubInfoChangeRequestCount {
  clubInfoChangeAdminRequest: Int!
}

input ClubInfoChangeRequestCreateInput {
  changeDescription: String!
  changeStatus: requestStatusEnum!
  club: ClubCreateNestedOneWithoutClubInfoChangeRequestInput!
  clubInfoChangeAdminRequest: ClubInfoChangeAdminRequestCreateNestedManyWithoutClubInput
  createdAt: DateTime
  description: String!
  expireDate: DateTime!
  id: String
  jobId: String
  name: String!
  requester: ClubAdminCreateNestedOneWithoutClubRequestInput!
  status: requestStatusEnum!
  title: String!
  updatedAt: DateTime
}

input ClubInfoChangeRequestCreateManyClubInput {
  changeDescription: String!
  changeStatus: requestStatusEnum!
  createdAt: DateTime
  description: String!
  expireDate: DateTime!
  id: String
  jobId: String
  name: String!
  requesterId: String!
  status: requestStatusEnum!
  title: String!
  updatedAt: DateTime
}

input ClubInfoChangeRequestCreateManyClubInputEnvelope {
  data: [ClubInfoChangeRequestCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubInfoChangeRequestCreateManyRequesterInput {
  changeDescription: String!
  changeStatus: requestStatusEnum!
  clubId: String!
  createdAt: DateTime
  description: String!
  expireDate: DateTime!
  id: String
  jobId: String
  name: String!
  status: requestStatusEnum!
  title: String!
  updatedAt: DateTime
}

input ClubInfoChangeRequestCreateManyRequesterInputEnvelope {
  data: [ClubInfoChangeRequestCreateManyRequesterInput!]!
  skipDuplicates: Boolean
}

input ClubInfoChangeRequestCreateNestedManyWithoutClubInput {
  connect: [ClubInfoChangeRequestWhereUniqueInput!]
  connectOrCreate: [ClubInfoChangeRequestCreateOrConnectWithoutClubInput!]
  create: [ClubInfoChangeRequestCreateWithoutClubInput!]
  createMany: ClubInfoChangeRequestCreateManyClubInputEnvelope
}

input ClubInfoChangeRequestCreateNestedManyWithoutRequesterInput {
  connect: [ClubInfoChangeRequestWhereUniqueInput!]
  connectOrCreate: [ClubInfoChangeRequestCreateOrConnectWithoutRequesterInput!]
  create: [ClubInfoChangeRequestCreateWithoutRequesterInput!]
  createMany: ClubInfoChangeRequestCreateManyRequesterInputEnvelope
}

input ClubInfoChangeRequestCreateNestedOneWithoutClubInfoChangeAdminRequestInput {
  connect: ClubInfoChangeRequestWhereUniqueInput
  connectOrCreate: ClubInfoChangeRequestCreateOrConnectWithoutClubInfoChangeAdminRequestInput
  create: ClubInfoChangeRequestCreateWithoutClubInfoChangeAdminRequestInput
}

input ClubInfoChangeRequestCreateOrConnectWithoutClubInfoChangeAdminRequestInput {
  create: ClubInfoChangeRequestCreateWithoutClubInfoChangeAdminRequestInput!
  where: ClubInfoChangeRequestWhereUniqueInput!
}

input ClubInfoChangeRequestCreateOrConnectWithoutClubInput {
  create: ClubInfoChangeRequestCreateWithoutClubInput!
  where: ClubInfoChangeRequestWhereUniqueInput!
}

input ClubInfoChangeRequestCreateOrConnectWithoutRequesterInput {
  create: ClubInfoChangeRequestCreateWithoutRequesterInput!
  where: ClubInfoChangeRequestWhereUniqueInput!
}

input ClubInfoChangeRequestCreateWithoutClubInfoChangeAdminRequestInput {
  changeDescription: String!
  changeStatus: requestStatusEnum!
  club: ClubCreateNestedOneWithoutClubInfoChangeRequestInput!
  createdAt: DateTime
  description: String!
  expireDate: DateTime!
  id: String
  jobId: String
  name: String!
  requester: ClubAdminCreateNestedOneWithoutClubRequestInput!
  status: requestStatusEnum!
  title: String!
  updatedAt: DateTime
}

input ClubInfoChangeRequestCreateWithoutClubInput {
  changeDescription: String!
  changeStatus: requestStatusEnum!
  clubInfoChangeAdminRequest: ClubInfoChangeAdminRequestCreateNestedManyWithoutClubInput
  createdAt: DateTime
  description: String!
  expireDate: DateTime!
  id: String
  jobId: String
  name: String!
  requester: ClubAdminCreateNestedOneWithoutClubRequestInput!
  status: requestStatusEnum!
  title: String!
  updatedAt: DateTime
}

input ClubInfoChangeRequestCreateWithoutRequesterInput {
  changeDescription: String!
  changeStatus: requestStatusEnum!
  club: ClubCreateNestedOneWithoutClubInfoChangeRequestInput!
  clubInfoChangeAdminRequest: ClubInfoChangeAdminRequestCreateNestedManyWithoutClubInput
  createdAt: DateTime
  description: String!
  expireDate: DateTime!
  id: String
  jobId: String
  name: String!
  status: requestStatusEnum!
  title: String!
  updatedAt: DateTime
}

input ClubInfoChangeRequestListRelationFilter {
  every: ClubInfoChangeRequestWhereInput
  none: ClubInfoChangeRequestWhereInput
  some: ClubInfoChangeRequestWhereInput
}

input ClubInfoChangeRequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubInfoChangeRequestRelationFilter {
  is: ClubInfoChangeRequestWhereInput
  isNot: ClubInfoChangeRequestWhereInput
}

input ClubInfoChangeRequestWhereInput {
  AND: [ClubInfoChangeRequestWhereInput!]
  NOT: [ClubInfoChangeRequestWhereInput!]
  OR: [ClubInfoChangeRequestWhereInput!]
  changeDescription: StringFilter
  changeStatus: EnumRequestStatusEnumFilter
  club: ClubRelationFilter
  clubId: StringFilter
  clubInfoChangeAdminRequest: ClubInfoChangeAdminRequestListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  expireDate: DateTimeFilter
  id: StringFilter
  jobId: StringNullableFilter
  name: StringFilter
  requester: ClubAdminRelationFilter
  requesterId: StringFilter
  status: EnumRequestStatusEnumFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input ClubInfoChangeRequestWhereUniqueInput {
  id: String
  name: String
}

type ClubMember {
  ClubMemberEvent: [ClubMemberEvent!]
  _count: ClubMemberCount!
  club: Club!
  clubId: String!
  createdAt: DateTime!
  deletedAt: DateTime
  id: ID!
  status: ClubMemberStatusEnum!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type ClubMemberCount {
  ClubMemberEvent: Int!
}

input ClubMemberCreateManyClubInput {
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  status: ClubMemberStatusEnum!
  updatedAt: DateTime
  userId: String!
}

input ClubMemberCreateManyClubInputEnvelope {
  data: [ClubMemberCreateManyClubInput!]!
  skipDuplicates: Boolean
}

input ClubMemberCreateManyUserInput {
  clubId: String!
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  status: ClubMemberStatusEnum!
  updatedAt: DateTime
}

input ClubMemberCreateManyUserInputEnvelope {
  data: [ClubMemberCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ClubMemberCreateNestedManyWithoutClubInput {
  connect: [ClubMemberWhereUniqueInput!]
  connectOrCreate: [ClubMemberCreateOrConnectWithoutClubInput!]
  create: [ClubMemberCreateWithoutClubInput!]
  createMany: ClubMemberCreateManyClubInputEnvelope
}

input ClubMemberCreateNestedManyWithoutUserInput {
  connect: [ClubMemberWhereUniqueInput!]
  connectOrCreate: [ClubMemberCreateOrConnectWithoutUserInput!]
  create: [ClubMemberCreateWithoutUserInput!]
  createMany: ClubMemberCreateManyUserInputEnvelope
}

input ClubMemberCreateNestedOneWithoutClubMemberEventInput {
  connect: ClubMemberWhereUniqueInput
  connectOrCreate: ClubMemberCreateOrConnectWithoutClubMemberEventInput
  create: ClubMemberCreateWithoutClubMemberEventInput
}

input ClubMemberCreateOrConnectWithoutClubInput {
  create: ClubMemberCreateWithoutClubInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberCreateOrConnectWithoutClubMemberEventInput {
  create: ClubMemberCreateWithoutClubMemberEventInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberCreateOrConnectWithoutUserInput {
  create: ClubMemberCreateWithoutUserInput!
  where: ClubMemberWhereUniqueInput!
}

input ClubMemberCreateWithoutClubInput {
  ClubMemberEvent: ClubMemberEventCreateNestedManyWithoutMemberInput
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  status: ClubMemberStatusEnum!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutClubMemberInput!
}

input ClubMemberCreateWithoutClubMemberEventInput {
  club: ClubCreateNestedOneWithoutClubMemberInput!
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  status: ClubMemberStatusEnum!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutClubMemberInput!
}

input ClubMemberCreateWithoutUserInput {
  ClubMemberEvent: ClubMemberEventCreateNestedManyWithoutMemberInput
  club: ClubCreateNestedOneWithoutClubMemberInput!
  createdAt: DateTime
  deletedAt: DateTime
  id: String
  status: ClubMemberStatusEnum!
  updatedAt: DateTime
}

type ClubMemberEvent {
  attendance: ClubMemberEventAttendanceEnum!
  event: ClubEvent!
  eventId: String!
  id: ID!
  member: ClubMember!
  memberId: String!
  status: ClubMemberEventStatusEnum!
}

enum ClubMemberEventAttendanceEnum {
  ABSENT
  LEAVE
  PRESENT
}

input ClubMemberEventCreateManyEventInput {
  attendance: ClubMemberEventAttendanceEnum
  id: String
  memberId: String!
  status: ClubMemberEventStatusEnum
}

input ClubMemberEventCreateManyEventInputEnvelope {
  data: [ClubMemberEventCreateManyEventInput!]!
  skipDuplicates: Boolean
}

input ClubMemberEventCreateManyMemberInput {
  attendance: ClubMemberEventAttendanceEnum
  eventId: String!
  id: String
  status: ClubMemberEventStatusEnum
}

input ClubMemberEventCreateManyMemberInputEnvelope {
  data: [ClubMemberEventCreateManyMemberInput!]!
  skipDuplicates: Boolean
}

input ClubMemberEventCreateNestedManyWithoutEventInput {
  connect: [ClubMemberEventWhereUniqueInput!]
  connectOrCreate: [ClubMemberEventCreateOrConnectWithoutEventInput!]
  create: [ClubMemberEventCreateWithoutEventInput!]
  createMany: ClubMemberEventCreateManyEventInputEnvelope
}

input ClubMemberEventCreateNestedManyWithoutMemberInput {
  connect: [ClubMemberEventWhereUniqueInput!]
  connectOrCreate: [ClubMemberEventCreateOrConnectWithoutMemberInput!]
  create: [ClubMemberEventCreateWithoutMemberInput!]
  createMany: ClubMemberEventCreateManyMemberInputEnvelope
}

input ClubMemberEventCreateOrConnectWithoutEventInput {
  create: ClubMemberEventCreateWithoutEventInput!
  where: ClubMemberEventWhereUniqueInput!
}

input ClubMemberEventCreateOrConnectWithoutMemberInput {
  create: ClubMemberEventCreateWithoutMemberInput!
  where: ClubMemberEventWhereUniqueInput!
}

input ClubMemberEventCreateWithoutEventInput {
  attendance: ClubMemberEventAttendanceEnum
  id: String
  member: ClubMemberCreateNestedOneWithoutClubMemberEventInput!
  status: ClubMemberEventStatusEnum
}

input ClubMemberEventCreateWithoutMemberInput {
  attendance: ClubMemberEventAttendanceEnum
  event: ClubEventCreateNestedOneWithoutClubMemberEventInput!
  id: String
  status: ClubMemberEventStatusEnum
}

input ClubMemberEventListRelationFilter {
  every: ClubMemberEventWhereInput
  none: ClubMemberEventWhereInput
  some: ClubMemberEventWhereInput
}

enum ClubMemberEventStatusEnum {
  JOINED
  LEFT
}

input ClubMemberEventWhereInput {
  AND: [ClubMemberEventWhereInput!]
  NOT: [ClubMemberEventWhereInput!]
  OR: [ClubMemberEventWhereInput!]
  attendance: EnumClubMemberEventAttendanceEnumFilter
  event: ClubEventRelationFilter
  eventId: StringFilter
  id: StringFilter
  member: ClubMemberRelationFilter
  memberId: StringFilter
  status: EnumClubMemberEventStatusEnumFilter
}

input ClubMemberEventWhereUniqueInput {
  id: String
}

input ClubMemberListRelationFilter {
  every: ClubMemberWhereInput
  none: ClubMemberWhereInput
  some: ClubMemberWhereInput
}

input ClubMemberOrderByRelationAggregateInput {
  _count: SortOrder
}

input ClubMemberRelationFilter {
  is: ClubMemberWhereInput
  isNot: ClubMemberWhereInput
}

enum ClubMemberStatusEnum {
  ACTIVE
  INACTIVE
  LEFT
  PREMIUM
}

input ClubMemberUserIdClubIdCompoundUniqueInput {
  clubId: String!
  userId: String!
}

input ClubMemberWhereInput {
  AND: [ClubMemberWhereInput!]
  ClubMemberEvent: ClubMemberEventListRelationFilter
  NOT: [ClubMemberWhereInput!]
  OR: [ClubMemberWhereInput!]
  club: ClubRelationFilter
  clubId: StringFilter
  createdAt: DateTimeFilter
  deletedAt: DateTimeNullableFilter
  id: StringFilter
  status: EnumClubMemberStatusEnumFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ClubMemberWhereUniqueInput {
  id: String
  userId_clubId: ClubMemberUserIdClubIdCompoundUniqueInput
}

enum ClubOrderByRelevanceFieldEnum {
  description
  id
  name
}

input ClubOrderByRelevanceInput {
  fields: [ClubOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input ClubOrderByWithRelationAndSearchRelevanceInput {
  ClubEvent: ClubEventOrderByRelationAggregateInput
  ClubMember: ClubMemberOrderByRelationAggregateInput
  _relevance: ClubOrderByRelevanceInput
  clubAdmin: ClubAdminOrderByRelationAggregateInput
  clubInfoChangeRequest: ClubInfoChangeRequestOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input ClubRelationFilter {
  is: ClubWhereInput
  isNot: ClubWhereInput
}

enum ClubScalarFieldEnum {
  createdAt
  description
  id
  name
  status
  updatedAt
}

enum ClubStatusEnum {
  ACTIVE
  DEPRECATED
  INACTIVE
  INVALIDATED
}

input ClubWhereInput {
  AND: [ClubWhereInput!]
  ClubEvent: ClubEventListRelationFilter
  ClubMember: ClubMemberListRelationFilter
  NOT: [ClubWhereInput!]
  OR: [ClubWhereInput!]
  clubAdmin: ClubAdminListRelationFilter
  clubInfoChangeRequest: ClubInfoChangeRequestListRelationFilter
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  name: StringFilter
  status: EnumClubStatusEnumFilter
  updatedAt: DateTimeFilter
}

input ClubWhereUniqueInput {
  id: String
  name: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input EnumClubAdminRoleEnumFilter {
  equals: ClubAdminRoleEnum
  in: [ClubAdminRoleEnum!]
  not: NestedEnumClubAdminRoleEnumFilter
  notIn: [ClubAdminRoleEnum!]
}

input EnumClubAdminStatusEnumFilter {
  equals: ClubAdminStatusEnum
  in: [ClubAdminStatusEnum!]
  not: NestedEnumClubAdminStatusEnumFilter
  notIn: [ClubAdminStatusEnum!]
}

input EnumClubEventStatusEnumFilter {
  equals: ClubEventStatusEnum
  in: [ClubEventStatusEnum!]
  not: NestedEnumClubEventStatusEnumFilter
  notIn: [ClubEventStatusEnum!]
}

input EnumClubMemberEventAttendanceEnumFilter {
  equals: ClubMemberEventAttendanceEnum
  in: [ClubMemberEventAttendanceEnum!]
  not: NestedEnumClubMemberEventAttendanceEnumFilter
  notIn: [ClubMemberEventAttendanceEnum!]
}

input EnumClubMemberEventStatusEnumFilter {
  equals: ClubMemberEventStatusEnum
  in: [ClubMemberEventStatusEnum!]
  not: NestedEnumClubMemberEventStatusEnumFilter
  notIn: [ClubMemberEventStatusEnum!]
}

input EnumClubMemberStatusEnumFilter {
  equals: ClubMemberStatusEnum
  in: [ClubMemberStatusEnum!]
  not: NestedEnumClubMemberStatusEnumFilter
  notIn: [ClubMemberStatusEnum!]
}

input EnumClubStatusEnumFilter {
  equals: ClubStatusEnum
  in: [ClubStatusEnum!]
  not: NestedEnumClubStatusEnumFilter
  notIn: [ClubStatusEnum!]
}

input EnumRequestStatusEnumFilter {
  equals: requestStatusEnum
  in: [requestStatusEnum!]
  not: NestedEnumRequestStatusEnumFilter
  notIn: [requestStatusEnum!]
}

input EnumStudentStatusEnumFilter {
  equals: StudentStatusEnum
  in: [StudentStatusEnum!]
  not: NestedEnumStudentStatusEnumFilter
  notIn: [StudentStatusEnum!]
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createClubInfoChangeRequest(data: ClubInfoChangeRequestCreateInput!): ClubInfoChangeRequest!
  createOneClub(data: ClubCreateInput!): Club!
  loginClubAdmin(data: LoginInput!): Token!
  loginSuperAdmin(data: LoginInput!): Token!
  loginUser(data: LoginInput!): Token!
  updateClubInfoChangeRequestStatus(data: UpdateInfoChangeRequestStatusInput!): ClubInfoChangeRequest!
  userSignUp(data: UserSignUpInput!): Token!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedEnumClubAdminRoleEnumFilter {
  equals: ClubAdminRoleEnum
  in: [ClubAdminRoleEnum!]
  not: NestedEnumClubAdminRoleEnumFilter
  notIn: [ClubAdminRoleEnum!]
}

input NestedEnumClubAdminStatusEnumFilter {
  equals: ClubAdminStatusEnum
  in: [ClubAdminStatusEnum!]
  not: NestedEnumClubAdminStatusEnumFilter
  notIn: [ClubAdminStatusEnum!]
}

input NestedEnumClubEventStatusEnumFilter {
  equals: ClubEventStatusEnum
  in: [ClubEventStatusEnum!]
  not: NestedEnumClubEventStatusEnumFilter
  notIn: [ClubEventStatusEnum!]
}

input NestedEnumClubMemberEventAttendanceEnumFilter {
  equals: ClubMemberEventAttendanceEnum
  in: [ClubMemberEventAttendanceEnum!]
  not: NestedEnumClubMemberEventAttendanceEnumFilter
  notIn: [ClubMemberEventAttendanceEnum!]
}

input NestedEnumClubMemberEventStatusEnumFilter {
  equals: ClubMemberEventStatusEnum
  in: [ClubMemberEventStatusEnum!]
  not: NestedEnumClubMemberEventStatusEnumFilter
  notIn: [ClubMemberEventStatusEnum!]
}

input NestedEnumClubMemberStatusEnumFilter {
  equals: ClubMemberStatusEnum
  in: [ClubMemberStatusEnum!]
  not: NestedEnumClubMemberStatusEnumFilter
  notIn: [ClubMemberStatusEnum!]
}

input NestedEnumClubStatusEnumFilter {
  equals: ClubStatusEnum
  in: [ClubStatusEnum!]
  not: NestedEnumClubStatusEnumFilter
  notIn: [ClubStatusEnum!]
}

input NestedEnumRequestStatusEnumFilter {
  equals: requestStatusEnum
  in: [requestStatusEnum!]
  not: NestedEnumRequestStatusEnumFilter
  notIn: [requestStatusEnum!]
}

input NestedEnumStudentStatusEnumFilter {
  equals: StudentStatusEnum
  in: [StudentStatusEnum!]
  not: NestedEnumStudentStatusEnumFilter
  notIn: [StudentStatusEnum!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

type Query {
  findManyClub(cursor: ClubWhereUniqueInput, distinct: [ClubScalarFieldEnum!], orderBy: [ClubOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: ClubWhereInput): [Club!]!
  findOneClub(cursor: ClubWhereUniqueInput, distinct: [ClubScalarFieldEnum!], orderBy: [ClubOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: ClubWhereInput): Club!
  userFindOne(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationAndSearchRelevanceInput!], skip: Int, take: Int, where: UserWhereInput): User!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  search: String
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  search: String
  startsWith: String
}

enum StudentStatusEnum {
  ACTIVE
  GRADUATED
  INACTIVE
}

type Token {
  accessToken: String!
  refreshToken: String!
}

input UpdateInfoChangeRequestStatusInput {
  requestId: String!
  status: requestStatusEnum!
}

type User {
  ClubMember: [ClubMember!]
  _count: UserCount!
  clubAdmin: [ClubAdmin!]
  clubInfoChangeAdminRequest: [ClubInfoChangeAdminRequest!]
  contactNumber: String
  createdAt: DateTime!
  email: String!
  id: ID!
  password: String!
  status: StudentStatusEnum!
  tpNumber: String!
  updatedAt: DateTime!
  username: String!
}

type UserCount {
  ClubMember: Int!
  clubAdmin: Int!
  clubInfoChangeAdminRequest: Int!
}

input UserCreateNestedOneWithoutClubAdminInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClubAdminInput
  create: UserCreateWithoutClubAdminInput
}

input UserCreateNestedOneWithoutClubInfoChangeAdminRequestInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClubInfoChangeAdminRequestInput
  create: UserCreateWithoutClubInfoChangeAdminRequestInput
}

input UserCreateNestedOneWithoutClubMemberInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutClubMemberInput
  create: UserCreateWithoutClubMemberInput
}

input UserCreateOrConnectWithoutClubAdminInput {
  create: UserCreateWithoutClubAdminInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutClubInfoChangeAdminRequestInput {
  create: UserCreateWithoutClubInfoChangeAdminRequestInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutClubMemberInput {
  create: UserCreateWithoutClubMemberInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutClubAdminInput {
  ClubMember: ClubMemberCreateNestedManyWithoutUserInput
  clubInfoChangeAdminRequest: ClubInfoChangeAdminRequestCreateNestedManyWithoutUserInput
  contactNumber: String
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  status: StudentStatusEnum
  tpNumber: String!
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutClubInfoChangeAdminRequestInput {
  ClubMember: ClubMemberCreateNestedManyWithoutUserInput
  clubAdmin: ClubAdminCreateNestedManyWithoutUserInput
  contactNumber: String
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  status: StudentStatusEnum
  tpNumber: String!
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutClubMemberInput {
  clubAdmin: ClubAdminCreateNestedManyWithoutUserInput
  clubInfoChangeAdminRequest: ClubInfoChangeAdminRequestCreateNestedManyWithoutUserInput
  contactNumber: String
  createdAt: DateTime
  email: String!
  id: String
  password: String!
  status: StudentStatusEnum
  tpNumber: String!
  updatedAt: DateTime
  username: String!
}

enum UserOrderByRelevanceFieldEnum {
  contactNumber
  email
  id
  password
  tpNumber
  username
}

input UserOrderByRelevanceInput {
  fields: [UserOrderByRelevanceFieldEnum!]!
  search: String!
  sort: SortOrder!
}

input UserOrderByWithRelationAndSearchRelevanceInput {
  ClubMember: ClubMemberOrderByRelationAggregateInput
  _relevance: UserOrderByRelevanceInput
  clubAdmin: ClubAdminOrderByRelationAggregateInput
  clubInfoChangeAdminRequest: ClubInfoChangeAdminRequestOrderByRelationAggregateInput
  contactNumber: SortOrder
  createdAt: SortOrder
  email: SortOrder
  id: SortOrder
  password: SortOrder
  status: SortOrder
  tpNumber: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  contactNumber
  createdAt
  email
  id
  password
  status
  tpNumber
  updatedAt
  username
}

input UserSignUpInput {
  contactNumber: String!
  email: String!
  password: String!
  tpNumber: String!
  username: String!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  ClubMember: ClubMemberListRelationFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  clubAdmin: ClubAdminListRelationFilter
  clubInfoChangeAdminRequest: ClubInfoChangeAdminRequestListRelationFilter
  contactNumber: StringNullableFilter
  createdAt: DateTimeFilter
  email: StringFilter
  id: StringFilter
  password: StringFilter
  status: EnumStudentStatusEnumFilter
  tpNumber: StringFilter
  updatedAt: DateTimeFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  contactNumber: String
  email: String
  id: String
  tpNumber: String
  username: String
}

enum requestStatusEnum {
  APPROVED
  REJECTED
  UNDER_REVIEW
}