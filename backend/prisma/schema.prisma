// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
  binaryTargets   = ["native", "linux-musl"]
}

// generator dbml {
//   provider = "prisma-dbml-generator"
// }

// generator erd {
//   provider                  = "prisma-erd-generator"
//   output                    = "../ERD.pdf"
//   includeRelationFromFields = true
// }

generator nestgraphql {
  provider     = "node node_modules/prisma-nestjs-graphql"
  emitCompiled = true
  purgeOutput  = true
  output       = "./@generated"
}

model User {
  id            String            @id @default(uuid())
  username      String            @unique
  email         String            @unique
  password      String
  tpNumber      String            @unique
  contactNumber String?           @unique
  status        StudentStatusEnum @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clubAdmin                  ClubAdmin[]
  clubInfoChangeAdminRequest ClubInfoChangeAdminRequest[]
  clubMember                 ClubMember[]
  clubEventMember            ClubEventMember[]
}

model ClubAdmin {
  id String @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id])
  clubId String
  club   Club   @relation(fields: [clubId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role            ClubAdminRoleEnum
  roleLabel       String
  clubAdminStatus ClubAdminStatusEnum     @default(ACTIVE)
  clubRequest     ClubInfoChangeRequest[]

  @@unique([userId, clubId])
}

model SuperAdmin {
  id       String @id @default(uuid())
  username String
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ClubMember {
  id String @id @default(uuid())

  userId  String
  user    User    @relation(fields: [userId], references: [id])
  clubId  String
  club    Club    @relation(fields: [clubId], references: [id])
  isAdmin Boolean @default(false)

  status ClubMemberStatusEnum

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([userId, clubId])
}

model Club {
  id          String         @id @default(uuid())
  name        String         @unique
  description String
  label       String         @unique
  thumbnail   String?
  logo        String?
  status      ClubStatusEnum @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  clubAdmin             ClubAdmin[]
  clubInfoChangeRequest ClubInfoChangeRequest[]
  clubEvent             ClubEvent[]
  clubMember            ClubMember[]
}

model ClubInfoChangeRequest {
  id                String            @id @default(uuid())
  title             String
  changeDescription String
  changeStatus      RequestStatusEnum
  jobId             String?

  name        String            @unique
  description String
  status      RequestStatusEnum
  expireDate  DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requesterId                String
  requester                  ClubAdmin                    @relation(fields: [requesterId], references: [id], onDelete: NoAction)
  clubId                     String
  club                       Club                         @relation(fields: [clubId], references: [id], onDelete: Cascade)
  clubInfoChangeAdminRequest ClubInfoChangeAdminRequest[]
}

model ClubInfoChangeAdminRequest {
  id    String @id
  label String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId              String
  user                User                  @relation(fields: [userId], references: [id])
  clubChangeRequestId String
  club                ClubInfoChangeRequest @relation(fields: [clubChangeRequestId], references: [id], onDelete: Cascade)
}

model ClubEvent {
  id          String              @id @default(uuid())
  name        String
  description String
  startAt     DateTime
  endAt       DateTime
  memberOnly  Boolean             @default(false)
  changed     Boolean             @default(false)
  status      ClubEventStatusEnum @default(IN_REVIEW)
  thumbnail   String?

  requestJobId    String?
  eventStartJobId String?
  eventEndJobId   String?

  clubId String
  club   Club   @relation(fields: [clubId], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  clubEventMember ClubEventMember[]
}

model ClubEventMember {
  id String @id @default(uuid())

  userId  String
  user    User      @relation(fields: [userId], references: [id])
  eventId String
  event   ClubEvent @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  status     ClubMemberEventStatusEnum     @default(JOINED)
  attendance ClubMemberEventAttendanceEnum @default(ABSENT)

  @@unique([userId, eventId])
}

enum StudentStatusEnum {
  ACTIVE
  INACTIVE
  GRADUATED
}

enum ClubAdminRoleEnum {
  PRESIDENT
  VICE_PRESIDENT
  SECRETARY
  ASSISTANT_SECRETARY
  TREASURER
  ASSISTANT_TREASURER
  COMMITEE
}

enum ClubStatusEnum {
  ACTIVE
  INACTIVE
  INVALIDATED
  DEPRECATED
}

enum RequestStatusEnum {
  UNDER_REVIEW
  REJECTED
  APPROVED
}

enum RequestTypeEnum {
  ACTIVITY
  INFORMATION
  COMMITEE
}

enum ClubAdminStatusEnum {
  ACTIVE
  RETIRED
  IN_REVIEW
}

enum ClubEventStatusEnum {
  IN_REVIEW
  ONGOING
  CANCELLED
  AWAITING
  FINISHED
}

enum ClubMemberStatusEnum {
  ACTIVE
  INACTIVE
  LEFT
  PREMIUM
}

enum ClubMemberEventStatusEnum {
  JOINED
  LEFT
}

enum ClubMemberEventAttendanceEnum {
  PRESENT
  ABSENT
  LEAVE
}
